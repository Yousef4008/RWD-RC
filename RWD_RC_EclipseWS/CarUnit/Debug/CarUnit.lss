
CarUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000241e  000024b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006e  0080006e  000024c0  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a98  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b74f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 10 	call	0x2132	; 0x2132 <main>
      8a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
    1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
    2. Enable the UART.
    3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* -> U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 -> RXEN  = 1 Receiver Enable
	 -> RXEN  = 1 Transmitter Enable
	 -> UCSZ2 = 0 For 5-bit/6-bit/7-bit/8-bit data mode
	 -> RXB8 & TXB8 used for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 -> UPM1:0  = parity bit mode
	 -> USBS    = stop bit mode
	 -> UCSZ1:0 = number of data bits (Character Size)
	 -> UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity) | (Config_Ptr->bit_data) | (Config_Ptr->stop_bit);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	80 81       	ld	r24, Z
     b7a:	98 2b       	or	r25, r24
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	89 2b       	or	r24, r25
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	8c 93       	st	X, r24
	
	/* -> Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	94 81       	ldd	r25, Z+4	; 0x04
     b90:	a5 81       	ldd	r26, Z+5	; 0x05
     b92:	b6 81       	ldd	r27, Z+6	; 0x06
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	aa 1f       	adc	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	aa 1f       	adc	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	aa 1f       	adc	r26, r26
     baa:	bb 1f       	adc	r27, r27
     bac:	9c 01       	movw	r18, r24
     bae:	ad 01       	movw	r20, r26
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	92 e1       	ldi	r25, 0x12	; 18
     bb4:	aa e7       	ldi	r26, 0x7A	; 122
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	bc 01       	movw	r22, r24
     bba:	cd 01       	movw	r24, r26
     bbc:	0e 94 b4 11 	call	0x2368	; 0x2368 <__udivmodsi4>
     bc0:	da 01       	movw	r26, r20
     bc2:	c9 01       	movw	r24, r18
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01

	/* -> First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	89 2f       	mov	r24, r25
     bd4:	99 27       	eor	r25, r25
     bd6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bd8:	e9 e2       	ldi	r30, 0x29	; 41
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 83       	st	Z, r24
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <UART_sendByte>:
/*
 * Description :
 -> Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 -> UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	    transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bfa:	eb e2       	ldi	r30, 0x2B	; 43
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	80 72       	andi	r24, 0x20	; 32
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	b9 f3       	breq	.-18     	; 0xbfa <UART_sendByte+0xc>

	/*
	 -> Put the required data in the UDR register and it also clear the UDRE flag as
	    the UDR register is not empty now
	 */
	UDR = data;
     c0c:	ec e2       	ldi	r30, 0x2C	; 44
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	80 83       	st	Z, r24

}
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <UART_recieveByte>:
/*
 * Description :
 -> Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	dc f7       	brge	.-10     	; 0xc24 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c2e:	ec e2       	ldi	r30, 0x2C	; 44
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <UART_sendString>:
/*
 * Description :
 -> Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <UART_sendString+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	80 81       	ld	r24, Z
     c60:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_sendByte>
		i++;
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	fc 01       	movw	r30, r24
     c76:	e2 0f       	add	r30, r18
     c78:	f3 1f       	adc	r31, r19
     c7a:	80 81       	ld	r24, Z
     c7c:	88 23       	and	r24, r24
     c7e:	39 f7       	brne	.-50     	; 0xc4e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_receiveString+0xa>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	8c 01       	movw	r16, r24
     cae:	02 0f       	add	r16, r18
     cb0:	13 1f       	adc	r17, r19
     cb2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
     cba:	0f c0       	rjmp	.+30     	; 0xcda <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	9b 81       	ldd	r25, Y+3	; 0x03
     ccc:	8c 01       	movw	r16, r24
     cce:	02 0f       	add	r16, r18
     cd0:	13 1f       	adc	r17, r19
     cd2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <UART_recieveByte>
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	fc 01       	movw	r30, r24
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	80 81       	ld	r24, Z
     cec:	83 32       	cpi	r24, 0x23	; 35
     cee:	31 f7       	brne	.-52     	; 0xcbc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	10 82       	st	Z, r1
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <__vector_9>:
/*______________________________________________________________________________
 |                           Interrupt Service Routine                          |
 |______________________________________________________________________________|
 */

ISR (TIMER1_OVF_vect){
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     d3c:	80 91 6e 00 	lds	r24, 0x006E
     d40:	90 91 6f 00 	lds	r25, 0x006F
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	29 f0       	breq	.+10     	; 0xd52 <__vector_9+0x40>
		(*target_routine)();
     d48:	e0 91 6e 00 	lds	r30, 0x006E
     d4c:	f0 91 6f 00 	lds	r31, 0x006F
     d50:	09 95       	icall
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_7>:

ISR (TIMER1_COMPA_vect){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     da2:	80 91 6e 00 	lds	r24, 0x006E
     da6:	90 91 6f 00 	lds	r25, 0x006F
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	29 f0       	breq	.+10     	; 0xdb8 <__vector_7+0x40>
		(*target_routine)();
     dae:	e0 91 6e 00 	lds	r30, 0x006E
     db2:	f0 91 6f 00 	lds	r31, 0x006F
     db6:	09 95       	icall
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <Timer1_init>:
 -> Functional responsible for Initialize Timer1 by:
    1. Setting the initial value of the counter
    2. Setup the mode (Normal / Compare)
    3. Setup the prescaler
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <Timer1_init+0x6>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
     dec:	ac e4       	ldi	r26, 0x4C	; 76
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	9c 93       	st	X, r25
     dfc:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == NORMAL_MODE){
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	87 81       	ldd	r24, Z+7	; 0x07
     e04:	88 23       	and	r24, r24
     e06:	91 f4       	brne	.+36     	; 0xe2c <Timer1_init+0x4e>

		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
     e08:	a9 e5       	ldi	r26, 0x59	; 89
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e9 e5       	ldi	r30, 0x59	; 89
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 1)
		 */

		TCCR1A = (1<<FOC1A);
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 1)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler;
     e1e:	ae e4       	ldi	r26, 0x4E	; 78
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	86 81       	ldd	r24, Z+6	; 0x06
     e28:	8c 93       	st	X, r24
     e2a:	44 c0       	rjmp	.+136    	; 0xeb4 <Timer1_init+0xd6>

	}
	else if(Config_Ptr->mode == COMPARE_MODE){
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	87 81       	ldd	r24, Z+7	; 0x07
     e32:	88 30       	cpi	r24, 0x08	; 8
     e34:	f9 f4       	brne	.+62     	; 0xe74 <Timer1_init+0x96>

		OCR1A = Config_Ptr->compare_value;
     e36:	aa e4       	ldi	r26, 0x4A	; 74
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e9 81       	ldd	r30, Y+1	; 0x01
     e3c:	fa 81       	ldd	r31, Y+2	; 0x02
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     e48:	a9 e5       	ldi	r26, 0x59	; 89
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e9 e5       	ldi	r30, 0x59	; 89
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
     e56:	ef e4       	ldi	r30, 0x4F	; 79
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	88 e0       	ldi	r24, 0x08	; 8
     e5c:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
     e5e:	ae e4       	ldi	r26, 0x4E	; 78
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	96 81       	ldd	r25, Z+6	; 0x06
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	87 81       	ldd	r24, Z+7	; 0x07
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
     e72:	20 c0       	rjmp	.+64     	; 0xeb4 <Timer1_init+0xd6>
	}
	else{

		ICR1 = Config_Ptr->top_count;	/* Set TOP count for timer1 in ICR1 register */
     e74:	a6 e4       	ldi	r26, 0x46	; 70
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	95 81       	ldd	r25, Z+5	; 0x05
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24

		OCR1A = Config_Ptr->compare_value;
     e86:	aa e4       	ldi	r26, 0x4A	; 74
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24

		TCCR1A = (1<<WGM11) | (1<<COM1A1);
     e98:	ef e4       	ldi	r30, 0x4F	; 79
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	82 e8       	ldi	r24, 0x82	; 130
     e9e:	80 83       	st	Z, r24

		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
     ea0:	ae e4       	ldi	r26, 0x4E	; 78
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	96 81       	ldd	r25, Z+6	; 0x06
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	87 81       	ldd	r24, Z+7	; 0x07
     eb0:	89 2b       	or	r24, r25
     eb2:	8c 93       	st	X, r24


	}
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <Timer1_deInit>:

/*
 * Description :
 -> Functional responsible for uninitialize timer1
 */
void Timer1_deInit(void){
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     ec6:	ec e4       	ldi	r30, 0x4C	; 76
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	11 82       	std	Z+1, r1	; 0x01
     ecc:	10 82       	st	Z, r1
	TCCR1B = 0;
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	10 82       	st	Z, r1
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <Timer1_setCallBack>:

/*
 * Description :
 -> Functional responsible for setting the call back function
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <Timer1_setCallBack+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	target_routine = a_ptr;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	90 93 6f 00 	sts	0x006F, r25
     ef0:	80 93 6e 00 	sts	0x006E, r24
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <SPI_init>:

/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_init(uint8 mode){
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	64 e0       	ldi	r22, 0x04	; 4
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	65 e0       	ldi	r22, 0x05	; 5
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	66 e0       	ldi	r22, 0x06	; 6
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	67 e0       	ldi	r22, 0x07	; 7
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>



	if(mode == MASTER_MODE)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	29 f4       	brne	.+10     	; 0xf42 <SPI_init+0x44>
		SPCR = (1<<SPE) | (1<<MSTR);
     f38:	ed e2       	ldi	r30, 0x2D	; 45
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 e5       	ldi	r24, 0x50	; 80
     f3e:	80 83       	st	Z, r24
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <SPI_init+0x52>
	else if (mode == SLEVE_MODE)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 23       	and	r24, r24
     f46:	21 f4       	brne	.+8      	; 0xf50 <SPI_init+0x52>
		SPCR = (1<<SPE);
     f48:	ed e2       	ldi	r30, 0x2D	; 45
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	80 83       	st	Z, r24

	SPSR &= ~(1<<SPI2X);
     f50:	ae e2       	ldi	r26, 0x2E	; 46
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e2       	ldi	r30, 0x2E	; 46
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
     f5c:	8c 93       	st	X, r24
}
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <SPI_sendReceiveByte>:
/*
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data){
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     f72:	ef e2       	ldi	r30, 0x2F	; 47
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF));
     f7a:	ee e2       	ldi	r30, 0x2E	; 46
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 23       	and	r24, r24
     f82:	dc f7       	brge	.-10     	; 0xf7a <SPI_sendReceiveByte+0x14>
	return SPDR;
     f84:	ef e2       	ldi	r30, 0x2F	; 47
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <SPI_sendString>:

/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <SPI_sendString+0x6>
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9b 83       	std	Y+3, r25	; 0x03
     fa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fa2:	19 82       	std	Y+1, r1	; 0x01
     fa4:	0e c0       	rjmp	.+28     	; 0xfc2 <SPI_sendString+0x30>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		SPI_sendReceiveByte(str[i]);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	fc 01       	movw	r30, r24
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	80 81       	ld	r24, Z
     fb8:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
		i++;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01
 */
void SPI_sendString(const uint8 *str){
	uint8 i = 0;

	/* Send the whole string */
	while(str[i] != '\0')
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	39 f7       	brne	.-50     	; 0xfa6 <SPI_sendString+0x14>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		SPI_sendReceiveByte(str[i]);
		i++;
	}
	SPI_sendReceiveByte('#');
     fd8:	83 e2       	ldi	r24, 0x23	; 35
     fda:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <SPI_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str){
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <SPI_receiveString+0xa>
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ffe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	8c 01       	movw	r16, r24
    100c:	02 0f       	add	r16, r18
    100e:	13 1f       	adc	r17, r19
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
    1016:	f8 01       	movw	r30, r16
    1018:	80 83       	st	Z, r24
    101a:	10 c0       	rjmp	.+32     	; 0x103c <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	8c 01       	movw	r16, r24
    102e:	02 0f       	add	r16, r18
    1030:	13 1f       	adc	r17, r19
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
    1038:	f8 01       	movw	r30, r16
    103a:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	fc 01       	movw	r30, r24
    1048:	e2 0f       	add	r30, r18
    104a:	f3 1f       	adc	r31, r19
    104c:	80 81       	ld	r24, Z
    104e:	83 32       	cpi	r24, 0x23	; 35
    1050:	29 f7       	brne	.-54     	; 0x101c <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	10 82       	st	Z, r1
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <GPIO_setupPinDirection>:
 * Description :
 -> Setup the direction of the required pin input/output.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_setupPinDirection+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <GPIO_setupPinDirection+0x8>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	6a 83       	std	Y+2, r22	; 0x02
    1086:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	08 f0       	brcs	.+2      	; 0x1090 <GPIO_setupPinDirection+0x1c>
    108e:	d5 c0       	rjmp	.+426    	; 0x123a <GPIO_setupPinDirection+0x1c6>
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <GPIO_setupPinDirection+0x24>
    1096:	d1 c0       	rjmp	.+418    	; 0x123a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3d 83       	std	Y+5, r19	; 0x05
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_setupPinDirection+0x3a>
    10ac:	43 c0       	rjmp	.+134    	; 0x1134 <GPIO_setupPinDirection+0xc0>
    10ae:	2c 81       	ldd	r18, Y+4	; 0x04
    10b0:	3d 81       	ldd	r19, Y+5	; 0x05
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <GPIO_setupPinDirection+0x4e>
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	71 f0       	breq	.+28     	; 0x10dc <GPIO_setupPinDirection+0x68>
    10c0:	bc c0       	rjmp	.+376    	; 0x123a <GPIO_setupPinDirection+0x1c6>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	09 f4       	brne	.+2      	; 0x10ce <GPIO_setupPinDirection+0x5a>
    10cc:	5f c0       	rjmp	.+190    	; 0x118c <GPIO_setupPinDirection+0x118>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	09 f4       	brne	.+2      	; 0x10da <GPIO_setupPinDirection+0x66>
    10d8:	85 c0       	rjmp	.+266    	; 0x11e4 <GPIO_setupPinDirection+0x170>
    10da:	af c0       	rjmp	.+350    	; 0x123a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x8c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x88>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	98 c0       	rjmp	.+304    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    110a:	aa e3       	ldi	r26, 0x3A	; 58
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ea e3       	ldi	r30, 0x3A	; 58
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0xb4>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0xb0>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	83 c0       	rjmp	.+262    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    113a:	a7 e3       	ldi	r26, 0x37	; 55
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e7 e3       	ldi	r30, 0x37	; 55
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0xe4>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0xe0>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	6c c0       	rjmp	.+216    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1162:	a7 e3       	ldi	r26, 0x37	; 55
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e3       	ldi	r30, 0x37	; 55
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x10c>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x108>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	57 c0       	rjmp	.+174    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1192:	a4 e3       	ldi	r26, 0x34	; 52
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x13c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x138>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	40 c0       	rjmp	.+128    	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x164>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x160>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	2b c0       	rjmp	.+86     	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11ea:	a1 e3       	ldi	r26, 0x31	; 49
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x194>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x190>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	14 c0       	rjmp	.+40     	; 0x123a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1212:	a1 e3       	ldi	r26, 0x31	; 49
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e1 e3       	ldi	r30, 0x31	; 49
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0x1bc>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0x1b8>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <GPIO_writePin>:
 -> Write the value Logic High or Logic Low on the required pin.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 -> If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_writePin+0x6>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_writePin+0x8>
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02
    125c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <GPIO_writePin+0x1c>
    1264:	d5 c0       	rjmp	.+426    	; 0x1410 <GPIO_writePin+0x1c6>
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	08 f0       	brcs	.+2      	; 0x126e <GPIO_writePin+0x24>
    126c:	d1 c0       	rjmp	.+418    	; 0x1410 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3d 83       	std	Y+5, r19	; 0x05
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <GPIO_writePin+0x3a>
    1282:	43 c0       	rjmp	.+134    	; 0x130a <GPIO_writePin+0xc0>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	2c f4       	brge	.+10     	; 0x1298 <GPIO_writePin+0x4e>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	71 f0       	breq	.+28     	; 0x12b2 <GPIO_writePin+0x68>
    1296:	bc c0       	rjmp	.+376    	; 0x1410 <GPIO_writePin+0x1c6>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <GPIO_writePin+0x5a>
    12a2:	5f c0       	rjmp	.+190    	; 0x1362 <GPIO_writePin+0x118>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <GPIO_writePin+0x66>
    12ae:	85 c0       	rjmp	.+266    	; 0x13ba <GPIO_writePin+0x170>
    12b0:	af c0       	rjmp	.+350    	; 0x1410 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12b8:	ab e3       	ldi	r26, 0x3B	; 59
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x8c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x88>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	98 c0       	rjmp	.+304    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12e0:	ab e3       	ldi	r26, 0x3B	; 59
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_writePin+0xb4>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_writePin+0xb0>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	83 c0       	rjmp	.+262    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a1 f4       	brne	.+40     	; 0x1338 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0xe4>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0xe0>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	6c c0       	rjmp	.+216    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0x10c>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0x108>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	57 c0       	rjmp	.+174    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	a1 f4       	brne	.+40     	; 0x1390 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1368:	a5 e3       	ldi	r26, 0x35	; 53
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x13c>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x138>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	40 c0       	rjmp	.+128    	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1390:	a5 e3       	ldi	r26, 0x35	; 53
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x164>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x160>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	2b c0       	rjmp	.+86     	; 0x1410 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x194>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x190>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x1bc>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x1b8>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <GPIO_readPin>:
 * Description :
 -> Read and return the value for the required pin, it should be Logic High or Logic Low.
 -> If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_readPin+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_readPin+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1432:	19 82       	std	Y+1, r1	; 0x01
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	08 f0       	brcs	.+2      	; 0x143c <GPIO_readPin+0x1c>
    143a:	84 c0       	rjmp	.+264    	; 0x1544 <GPIO_readPin+0x124>
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	08 f0       	brcs	.+2      	; 0x1444 <GPIO_readPin+0x24>
    1442:	80 c0       	rjmp	.+256    	; 0x1544 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 83       	std	Y+5, r19	; 0x05
    144c:	2c 83       	std	Y+4, r18	; 0x04
    144e:	4c 81       	ldd	r20, Y+4	; 0x04
    1450:	5d 81       	ldd	r21, Y+5	; 0x05
    1452:	41 30       	cpi	r20, 0x01	; 1
    1454:	51 05       	cpc	r21, r1
    1456:	79 f1       	breq	.+94     	; 0x14b6 <GPIO_readPin+0x96>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	91 05       	cpc	r25, r1
    1460:	34 f4       	brge	.+12     	; 0x146e <GPIO_readPin+0x4e>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	69 f0       	breq	.+26     	; 0x1486 <GPIO_readPin+0x66>
    146c:	6b c0       	rjmp	.+214    	; 0x1544 <GPIO_readPin+0x124>
    146e:	4c 81       	ldd	r20, Y+4	; 0x04
    1470:	5d 81       	ldd	r21, Y+5	; 0x05
    1472:	42 30       	cpi	r20, 0x02	; 2
    1474:	51 05       	cpc	r21, r1
    1476:	b9 f1       	breq	.+110    	; 0x14e6 <GPIO_readPin+0xc6>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <GPIO_readPin+0x64>
    1482:	49 c0       	rjmp	.+146    	; 0x1516 <GPIO_readPin+0xf6>
    1484:	5f c0       	rjmp	.+190    	; 0x1544 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1486:	e9 e3       	ldi	r30, 0x39	; 57
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_readPin+0x7e>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_readPin+0x7a>
    14a2:	ca 01       	movw	r24, r20
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	90 70       	andi	r25, 0x00	; 0
    14a8:	88 23       	and	r24, r24
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	47 c0       	rjmp	.+142    	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_readPin+0xae>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_readPin+0xaa>
    14d2:	ca 01       	movw	r24, r20
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	90 70       	andi	r25, 0x00	; 0
    14d8:	88 23       	and	r24, r24
    14da:	19 f0       	breq	.+6      	; 0x14e2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	31 c0       	rjmp	.+98     	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	2f c0       	rjmp	.+94     	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14e6:	e3 e3       	ldi	r30, 0x33	; 51
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <GPIO_readPin+0xde>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <GPIO_readPin+0xda>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	19 f0       	breq	.+6      	; 0x1512 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	19 c0       	rjmp	.+50     	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	17 c0       	rjmp	.+46     	; 0x1544 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1516:	e0 e3       	ldi	r30, 0x30	; 48
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_readPin+0x10e>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_readPin+0x10a>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	88 23       	and	r24, r24
    153a:	19 f0       	breq	.+6      	; 0x1542 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1542:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <GPIO_setupPortDirection>:
 -> If the direction value is PORT_INPUT all pins in this port should be input pins.
 -> If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_setupPortDirection+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_setupPortDirection+0x8>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	90 f5       	brcc	.+100    	; 0x15d0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <GPIO_setupPortDirection+0x5e>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <GPIO_setupPortDirection+0x3e>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 f0       	breq	.+24     	; 0x15aa <GPIO_setupPortDirection+0x54>
    1592:	1e c0       	rjmp	.+60     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	81 f0       	breq	.+32     	; 0x15be <GPIO_setupPortDirection+0x68>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <GPIO_setupPortDirection+0x72>
    15a8:	13 c0       	rjmp	.+38     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 83       	st	Z, r24
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15be:	e4 e3       	ldi	r30, 0x34	; 52
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15c8:	e1 e3       	ldi	r30, 0x31	; 49
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GPIO_writePort>:
 -> If any pin in the port is output pin the value will be written.
 -> If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_writePort+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_writePort+0x8>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	90 f5       	brcc	.+100    	; 0x1658 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3c 83       	std	Y+4, r19	; 0x04
    15fc:	2b 83       	std	Y+3, r18	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	d1 f0       	breq	.+52     	; 0x163c <GPIO_writePort+0x5e>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <GPIO_writePort+0x3e>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	61 f0       	breq	.+24     	; 0x1632 <GPIO_writePort+0x54>
    161a:	1e c0       	rjmp	.+60     	; 0x1658 <GPIO_writePort+0x7a>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <GPIO_writePort+0x68>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <GPIO_writePort+0x72>
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
			break;
		}
	}
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GPIO_readPort>:
 * Description :
 -> Read and return the value of the required port.
 -> If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_readPort+0x6>
    166c:	00 d0       	rcall	.+0      	; 0x166e <GPIO_readPort+0x8>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1674:	19 82       	std	Y+1, r1	; 0x01

	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	90 f5       	brcc	.+100    	; 0x16e0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3c 83       	std	Y+4, r19	; 0x04
    1684:	2b 83       	std	Y+3, r18	; 0x03
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	d1 f0       	breq	.+52     	; 0x16c4 <GPIO_readPort+0x5e>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <GPIO_readPort+0x3e>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 f0       	breq	.+24     	; 0x16ba <GPIO_readPort+0x54>
    16a2:	1e c0       	rjmp	.+60     	; 0x16e0 <GPIO_readPort+0x7a>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	81 f0       	breq	.+32     	; 0x16ce <GPIO_readPort+0x68>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	81 f0       	breq	.+32     	; 0x16d8 <GPIO_readPort+0x72>
    16b8:	13 c0       	rjmp	.+38     	; 0x16e0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16c4:	e6 e3       	ldi	r30, 0x36	; 54
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16ce:	e3 e3       	ldi	r30, 0x33	; 51
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16d8:	e0 e3       	ldi	r30, 0x30	; 48
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <SERVO_init>:

/*
 * Description :
 -> Setup the direction for the servo motor pins as output pin.
 */
void SERVO_init(void){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTD_ID , PIN5_ID , PIN_OUTPUT);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	65 e0       	ldi	r22, 0x05	; 5
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <SERVO_setDegree>:

/*
 * Description :
 -> Setting the angle of the servo motor
 */
void SERVO_setDegree(uint16 compare_value){
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	2a 97       	sbiw	r28, 0x0a	; 10
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	9a 87       	std	Y+10, r25	; 0x0a
    171e:	89 87       	std	Y+9, r24	; 0x09

	Timer1_ConfigType MyConfig = {0 , compare_value , 19999 , CLK_8_PRESCALER , FAST_PWM};
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	19 82       	std	Y+1, r1	; 0x01
    1724:	89 85       	ldd	r24, Y+9	; 0x09
    1726:	9a 85       	ldd	r25, Y+10	; 0x0a
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
    172c:	8f e1       	ldi	r24, 0x1F	; 31
    172e:	9e e4       	ldi	r25, 0x4E	; 78
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	8f 83       	std	Y+7, r24	; 0x07
    1738:	88 e1       	ldi	r24, 0x18	; 24
    173a:	88 87       	std	Y+8, r24	; 0x08
	Timer1_init(&MyConfig);
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 ef 06 	call	0xdde	; 0xdde <Timer1_init>

}
    1744:	2a 96       	adiw	r28, 0x0a	; 10
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <NRF24_init>:
/*
 * Description :
 -> Setup the direction of the required pin input/output.
 -> Setup SPI as master and setup the module
 */
void NRF24_init(void){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	2e 97       	sbiw	r28, 0x0e	; 14
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(CE_PORT_ID, CE_PIN_ID, PIN_OUTPUT);
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(CSN_PORT_ID, CSN_PIN_ID, PIN_OUTPUT);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	64 e0       	ldi	r22, 0x04	; 4
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>

	NRF24_chipDisable();
    177e:	0e 94 83 0c 	call	0x1906	; 0x1906 <NRF24_chipDisable>
	NRF24_CSN_unselect();
    1782:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>

	SPI_init(MASTER_MODE);
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	0e 94 7f 07 	call	0xefe	; 0xefe <SPI_init>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a8 ec       	ldi	r26, 0xC8	; 200
    1792:	b2 e4       	ldi	r27, 0x42	; 66
    1794:	8b 87       	std	Y+11, r24	; 0x0b
    1796:	9c 87       	std	Y+12, r25	; 0x0c
    1798:	ad 87       	std	Y+13, r26	; 0x0d
    179a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a ef       	ldi	r20, 0xFA	; 250
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8f 83       	std	Y+7, r24	; 0x07
    17b6:	98 87       	std	Y+8, r25	; 0x08
    17b8:	a9 87       	std	Y+9, r26	; 0x09
    17ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <NRF24_init+0x88>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <NRF24_init+0x106>
	else if (__tmp > 65535)
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <NRF24_init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	0f c0       	rjmp	.+30     	; 0x183e <NRF24_init+0xe8>
    1820:	88 ec       	ldi	r24, 0xC8	; 200
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <NRF24_init+0xd6>
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <NRF24_init+0xca>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <NRF24_init+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <NRF24_init+0x112>
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	NRF24_writeReg(CONFIG , 0x00);		// Will be configured later
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(EN_AA, 0x00);		// No Auto Ack.
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(EN_RXADDR, 0x00);	// Initially disable all pipes
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(SETUP_AW, 0x03);		// 5 bytes Address field width
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	63 e0       	ldi	r22, 0x03	; 3
    188c:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(SETUP_RETR, 0xF0);	// Disable Auto re transmission
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	60 ef       	ldi	r22, 0xF0	; 240
    1894:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	//NRF24_writeReg(SETUP_RETR, 0xF0);	// Wait 4000µS before re transmission
	NRF24_writeReg(RF_CH, 0x00);		// Will be setup during TX or RX
    1898:	85 e0       	ldi	r24, 0x05	; 5
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(RF_SETUP, 0x0E);		// 2Mbps -- 0dBm
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	6e e0       	ldi	r22, 0x0E	; 14
    18a4:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	//NRF24_sendCmd(ACTIVATE);			// Activating NRF24L01
	//NRF24_sendCmd(0x73);				// Activation command must be followed by 0x73 command



	NRF24_chipEnable();
    18a8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <NRF24_chipEnable>
}
    18ac:	2e 96       	adiw	r28, 0x0e	; 14
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <NRF24_CSN_select>:

/*
 * Description :
 -> this function is for chip select
 */
static void NRF24_CSN_select(void){
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(CSN_PORT_ID, CSN_PIN_ID, LOGIC_LOW);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <NRF24_CSN_unselect>:

/*
 * Description :
 -> this function is for chip unselect
 */
static void NRF24_CSN_unselect(void){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(CSN_PORT_ID, CSN_PIN_ID, LOGIC_HIGH);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	64 e0       	ldi	r22, 0x04	; 4
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <NRF24_chipEnable>:

/*
 * Description :
 -> module chip enable
 */
static void NRF24_chipEnable(void){
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(CE_PORT_ID, CE_PIN_ID, LOGIC_HIGH);
    18f6:	83 e0       	ldi	r24, 0x03	; 3
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <NRF24_chipDisable>:

/*
 * Description :
 -> module chip disable
 */
static void NRF24_chipDisable(void){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(CE_PORT_ID, CE_PIN_ID, LOGIC_HIGH);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <NRF24_writeReg>:

/*
 * Description :
 -> write a data on specific register on the module
 */
static void NRF24_writeReg(uint8 Reg, uint8 Data){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <NRF24_writeReg+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <NRF24_writeReg+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	6c 83       	std	Y+4, r22	; 0x04

	uint8 buf[2];

	buf[0] = Reg|1<<5;
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = Data;
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	8a 83       	std	Y+2, r24	; 0x02

	NRF24_CSN_select();
    1938:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(buf[0]);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
	SPI_sendReceiveByte(buf[1]);
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	NRF24_CSN_unselect();
    1948:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <NRF24_writeRegMulti>:

/*
 * Description :
 -> write multiple of data on a specific register on the module
 */
static void NRF24_writeRegMulti(uint8 Reg, uint8 * Data , uint8 size){
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <NRF24_writeRegMulti+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <NRF24_writeRegMulti+0x8>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <NRF24_writeRegMulti+0xa>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	8b 83       	std	Y+3, r24	; 0x03
    196a:	7d 83       	std	Y+5, r23	; 0x05
    196c:	6c 83       	std	Y+4, r22	; 0x04
    196e:	4e 83       	std	Y+6, r20	; 0x06

	NRF24_CSN_select();
    1970:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(Reg | (1<<5) );
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	80 62       	ori	r24, 0x20	; 32
    1978:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	for(int i = 0 ; i < size ; i++){
    197c:	1a 82       	std	Y+2, r1	; 0x02
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <NRF24_writeRegMulti+0x46>
		SPI_sendReceiveByte(Data[i]);
    1982:	29 81       	ldd	r18, Y+1	; 0x01
    1984:	3a 81       	ldd	r19, Y+2	; 0x02
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	fc 01       	movw	r30, r24
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	80 81       	ld	r24, Z
    1992:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	NRF24_CSN_select();

	SPI_sendReceiveByte(Reg | (1<<5) );

	for(int i = 0 ; i < size ; i++){
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	82 17       	cp	r24, r18
    19ac:	93 07       	cpc	r25, r19
    19ae:	4c f3       	brlt	.-46     	; 0x1982 <NRF24_writeRegMulti+0x28>
		SPI_sendReceiveByte(Data[i]);
	}

	NRF24_CSN_unselect();
    19b0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>
}
    19b4:	26 96       	adiw	r28, 0x06	; 6
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <NRF24_readReg>:

/*
 * Description :
 -> read the value of data on specific register on the module
 */
static uint8 NRF24_readReg(uint8 Reg){
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <NRF24_readReg+0x6>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 data = 0;
    19d2:	19 82       	std	Y+1, r1	; 0x01

	NRF24_CSN_select();
    19d4:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(Reg);
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	data = SPI_sendReceiveByte(0xFF);
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
    19e4:	89 83       	std	Y+1, r24	; 0x01

	NRF24_CSN_unselect();
    19e6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>

	return data;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <NRF24_sendCmd>:

/*
 * Description :
 -> sending a command to the module
 */
static void NRF24_sendCmd(uint8 cmd){
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01

	NRF24_CSN_select();
    1a02:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(cmd);
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	NRF24_CSN_unselect();
    1a0c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>
}
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <NRF24_txMode>:

/*
 * Description :
 -> sending the channel on specific address pipe
 */
void NRF24_txMode(uint8 * PipeAddress , uint8 channel){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <NRF24_txMode+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	6b 83       	std	Y+3, r22	; 0x03

	NRF24_chipDisable();
    1a2a:	0e 94 83 0c 	call	0x1906	; 0x1906 <NRF24_chipDisable>

	NRF24_writeReg(RF_CH, channel);		// Selecting the channel
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	6b 81       	ldd	r22, Y+3	; 0x03
    1a32:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeRegMulti(TX_ADDR, PipeAddress, 5);
    1a36:	29 81       	ldd	r18, Y+1	; 0x01
    1a38:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3a:	80 e1       	ldi	r24, 0x10	; 16
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	45 e0       	ldi	r20, 0x05	; 5
    1a40:	0e 94 ad 0c 	call	0x195a	; 0x195a <NRF24_writeRegMulti>
	NRF24_writeReg(CONFIG, NRF24_readReg(CONFIG)|(1<<1));	// Powering up the device & TX selection
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <NRF24_readReg>
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	92 60       	ori	r25, 0x02	; 2
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	69 2f       	mov	r22, r25
    1a52:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>

	NRF24_chipEnable();
    1a56:	0e 94 77 0c 	call	0x18ee	; 0x18ee <NRF24_chipEnable>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <NRF_transmit>:

/*
 * Description :
 -> transmitting the data over nRF module
 */
uint8 NRF_transmit(uint8 * Data ){
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	62 97       	sbiw	r28, 0x12	; 18
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	99 8b       	std	Y+17, r25	; 0x11
    1a7c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 FIFO_status = 0 ;
    1a7e:	1f 86       	std	Y+15, r1	; 0x0f
	NRF24_CSN_select();
    1a80:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(W_TX_PAYLOAD);			// Command to send it before payload
    1a84:	80 ea       	ldi	r24, 0xA0	; 160
    1a86:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

		SPI_sendReceiveByte(Data[0]);				// Sending the payload itself
    1a8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1a8c:	f9 89       	ldd	r31, Y+17	; 0x11
    1a8e:	80 81       	ld	r24, Z
    1a90:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
		SPI_sendReceiveByte(Data[1]);				// Sending the payload itself
    1a94:	88 89       	ldd	r24, Y+16	; 0x10
    1a96:	99 89       	ldd	r25, Y+17	; 0x11
    1a98:	fc 01       	movw	r30, r24
    1a9a:	31 96       	adiw	r30, 0x01	; 1
    1a9c:	80 81       	ld	r24, Z
    1a9e:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>


	NRF24_CSN_unselect();
    1aa2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e4       	ldi	r27, 0x40	; 64
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <NRF_transmit+0x92>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <NRF_transmit+0x110>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <NRF_transmit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <NRF_transmit+0xf2>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <NRF_transmit+0xe0>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <NRF_transmit+0xd4>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <NRF_transmit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <NRF_transmit+0x11c>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	FIFO_status = NRF24_readReg(FIFO_STATUS);
    1b8a:	87 e1       	ldi	r24, 0x17	; 23
    1b8c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <NRF24_readReg>
    1b90:	8f 87       	std	Y+15, r24	; 0x0f

	if ((FIFO_status&(1<<4)) && (!(FIFO_status&(1<<3))))	// Checking if the data was transmitted successfully
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 71       	andi	r24, 0x10	; 16
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f0       	breq	.+26     	; 0x1bba <NRF_transmit+0x154>
    1ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	88 70       	andi	r24, 0x08	; 8
    1ba8:	90 70       	andi	r25, 0x00	; 0
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	31 f4       	brne	.+12     	; 0x1bba <NRF_transmit+0x154>
	{

		NRF24_sendCmd(FLUSH_TX);
    1bae:	81 ee       	ldi	r24, 0xE1	; 225
    1bb0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <NRF24_sendCmd>

		return 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	8a 8b       	std	Y+18, r24	; 0x12
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <NRF_transmit+0x156>
	}

	return 0;
    1bba:	1a 8a       	std	Y+18, r1	; 0x12
    1bbc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1bbe:	62 96       	adiw	r28, 0x12	; 18
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <NRF24_rxMode>:

/*
 * Description :
 -> receiving the channel on specific address pipe
 */
void NRF24_rxMode(uint8 * PipeAddress , uint8 channel ){
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <NRF24_rxMode+0x6>
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6b 83       	std	Y+3, r22	; 0x03

	NRF24_chipDisable();
    1be2:	0e 94 83 0c 	call	0x1906	; 0x1906 <NRF24_chipDisable>

	NRF24_writeReg(RF_CH, channel);										// Selecting the channel
    1be6:	85 e0       	ldi	r24, 0x05	; 5
    1be8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bea:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(EN_RXADDR, NRF24_readReg(EN_RXADDR)|(1<<1));			// Enable data pipe 1
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <NRF24_readReg>
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	92 60       	ori	r25, 0x02	; 2
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	69 2f       	mov	r22, r25
    1bfc:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeRegMulti(RX_ADDR_P1, PipeAddress, 5);
    1c00:	29 81       	ldd	r18, Y+1	; 0x01
    1c02:	3a 81       	ldd	r19, Y+2	; 0x02
    1c04:	8b e0       	ldi	r24, 0x0B	; 11
    1c06:	b9 01       	movw	r22, r18
    1c08:	45 e0       	ldi	r20, 0x05	; 5
    1c0a:	0e 94 ad 0c 	call	0x195a	; 0x195a <NRF24_writeRegMulti>
	NRF24_writeReg(RX_PW_P1, 2);									// Selecting size of data pipe
    1c0e:	82 e1       	ldi	r24, 0x12	; 18
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
	NRF24_writeReg(CONFIG, NRF24_readReg(CONFIG)| (0x03) );				// Powering up the device & RX selection
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <NRF24_readReg>
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	93 60       	ori	r25, 0x03	; 3
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	69 2f       	mov	r22, r25
    1c24:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>

	NRF24_chipEnable();
    1c28:	0e 94 77 0c 	call	0x18ee	; 0x18ee <NRF24_chipEnable>
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <NRF24_isDataAvailable>:

/*
 * Description :
 -> checking if the data is available or not
 */
uint8 NRF24_isDataAvailable(uint8 pipeNum){
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <NRF24_isDataAvailable+0x6>
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	8a 83       	std	Y+2, r24	; 0x02

	uint8 statusReg = 0;
    1c46:	19 82       	std	Y+1, r1	; 0x01

	statusReg = NRF24_readReg(STATUS);
    1c48:	87 e0       	ldi	r24, 0x07	; 7
    1c4a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <NRF24_readReg>
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	if((statusReg&(1<<6))&&(statusReg&(pipeNum<<1))){	// if the data on pipe number has arrived or not
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	80 74       	andi	r24, 0x40	; 64
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	99 f0       	breq	.+38     	; 0x1c84 <NRF24_isDataAvailable+0x4c>
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	82 23       	and	r24, r18
    1c70:	93 23       	and	r25, r19
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <NRF24_isDataAvailable+0x4c>
		NRF24_writeReg(STATUS, (1<<6));		// Write 1 to clear RX_DR bit
    1c76:	87 e0       	ldi	r24, 0x07	; 7
    1c78:	60 e4       	ldi	r22, 0x40	; 64
    1c7a:	0e 94 8f 0c 	call	0x191e	; 0x191e <NRF24_writeReg>
		return 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <NRF24_isDataAvailable+0x4e>
	}
	return 0;
    1c84:	1b 82       	std	Y+3, r1	; 0x03
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <NRF24_receive>:

/*
 * Description :
 -> receiving the data over nRF module
 */
void NRF24_receive(uint8 *Data){
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	60 97       	sbiw	r28, 0x10	; 16
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	98 8b       	std	Y+16, r25	; 0x10
    1cae:	8f 87       	std	Y+15, r24	; 0x0f
	NRF24_CSN_select();
    1cb0:	0e 94 5f 0c 	call	0x18be	; 0x18be <NRF24_CSN_select>

	SPI_sendReceiveByte(R_RX_PAYLOAD);				// Command to send it before payload
    1cb4:	81 e6       	ldi	r24, 0x61	; 97
    1cb6:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>

	Data[0] = SPI_sendReceiveByte(0xFF);				// Receiving the payload itself
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
    1cc0:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cc2:	f8 89       	ldd	r31, Y+16	; 0x10
    1cc4:	80 83       	st	Z, r24
	Data[1] = SPI_sendReceiveByte(0xFF);				// Receiving the payload itself
    1cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc8:	98 89       	ldd	r25, Y+16	; 0x10
    1cca:	8c 01       	movw	r16, r24
    1ccc:	0f 5f       	subi	r16, 0xFF	; 255
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	0e 94 b3 07 	call	0xf66	; 0xf66 <SPI_sendReceiveByte>
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 83       	st	Z, r24

	NRF24_CSN_unselect();
    1cda:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <NRF24_CSN_unselect>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e4       	ldi	r27, 0x40	; 64
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <NRF24_receive+0x9c>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <NRF24_receive+0x11a>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <NRF24_receive+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <NRF24_receive+0xfc>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <NRF24_receive+0xea>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <NRF24_receive+0xde>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <NRF24_receive+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <NRF24_receive+0x126>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	NRF24_sendCmd(FLUSH_RX);
    1dc2:	82 ee       	ldi	r24, 0xE2	; 226
    1dc4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <NRF24_sendCmd>
}
    1dc8:	60 96       	adiw	r28, 0x10	; 16
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <G_LED_init>:


#include "LEDs.h"
#include "../../MCAL/GPIO/gpio.h"

void G_LED_init(void){
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(G_LED_PORT_ID,G_LED_PIN_ID,PIN_OUTPUT);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	65 e0       	ldi	r22, 0x05	; 5
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_writePin(G_LED_PORT_ID,G_LED_PIN_ID,LOGIC_HIGH);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	65 e0       	ldi	r22, 0x05	; 5
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <R_LED_init>:

void R_LED_init(void){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(R_LED_PORT_ID,R_LED_PIN_ID,PIN_OUTPUT);
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	67 e0       	ldi	r22, 0x07	; 7
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_writePin(R_LED_PORT_ID,R_LED_PIN_ID,LOGIC_HIGH);
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	67 e0       	ldi	r22, 0x07	; 7
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <G_LED_on>:

void G_LED_on(void){
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(G_LED_PORT_ID,G_LED_PIN_ID,LOGIC_LOW);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <G_LED_off>:

void G_LED_off(void){
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(G_LED_PORT_ID,G_LED_PIN_ID,LOGIC_HIGH);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	65 e0       	ldi	r22, 0x05	; 5
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <R_LED_on>:

void R_LED_on(void){
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(R_LED_PORT_ID,R_LED_PIN_ID,LOGIC_LOW);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	67 e0       	ldi	r22, 0x07	; 7
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <R_LED_off>:

void R_LED_off(void){
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(R_LED_PORT_ID,R_LED_PIN_ID,LOGIC_HIGH);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	67 e0       	ldi	r22, 0x07	; 7
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <L293D_Init>:
/*
 * Description :
 -> Function responsible for initialize the L293D driver.
 -> Function take a structure containing the configuration parameters.
 */
void L293D_Init(L293D_ChannelMode ChannelMode){
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <L293D_Init+0x6>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	switch(ChannelMode){
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3b 83       	std	Y+3, r19	; 0x03
    1e98:	2a 83       	std	Y+2, r18	; 0x02
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	59 f1       	breq	.+86     	; 0x1efa <L293D_Init+0x78>
    1ea4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea8:	23 30       	cpi	r18, 0x03	; 3
    1eaa:	31 05       	cpc	r19, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <L293D_Init+0x2e>
    1eae:	44 c0       	rjmp	.+136    	; 0x1f38 <L293D_Init+0xb6>
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <L293D_Init+0x3a>
    1eba:	7a c0       	rjmp	.+244    	; 0x1fb0 <L293D_Init+0x12e>
	case CHANNEL1_MODE:
		GPIO_setupPinDirection(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , PIN_OUTPUT);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , PIN_OUTPUT);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	66 e0       	ldi	r22, 0x06	; 6
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_EN1_PORT_ID , L293D_EN1_PIN_ID , PIN_OUTPUT);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_writePin(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , LOGIC_LOW);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , LOGIC_LOW);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	66 e0       	ldi	r22, 0x06	; 6
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_EN1_PORT_ID , L293D_EN1_PIN_ID , LOGIC_LOW);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    1ef8:	5b c0       	rjmp	.+182    	; 0x1fb0 <L293D_Init+0x12e>
		break;
	case CHANNEL2_MODE:
		GPIO_setupPinDirection(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , PIN_OUTPUT);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , PIN_OUTPUT);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_EN2_PORT_ID , L293D_EN2_PIN_ID , PIN_OUTPUT);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_writePin(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , LOGIC_LOW);
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , LOGIC_LOW);
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	64 e0       	ldi	r22, 0x04	; 4
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_EN2_PORT_ID , L293D_EN2_PIN_ID , LOGIC_LOW);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    1f36:	3c c0       	rjmp	.+120    	; 0x1fb0 <L293D_Init+0x12e>

		break;
	case DUAL_CHANNEL_MODE:
		GPIO_setupPinDirection(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , PIN_OUTPUT);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , PIN_OUTPUT);
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	66 e0       	ldi	r22, 0x06	; 6
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , PIN_OUTPUT);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , PIN_OUTPUT);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_EN1_PORT_ID , L293D_EN1_PIN_ID , PIN_OUTPUT);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(L293D_EN2_PORT_ID , L293D_EN2_PIN_ID , PIN_OUTPUT);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	64 e0       	ldi	r22, 0x04	; 4
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
		GPIO_writePin(L293D_IN1_PORT_ID , L293D_IN1_PIN_ID , LOGIC_LOW);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_IN2_PORT_ID , L293D_IN2_PIN_ID , LOGIC_LOW);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	66 e0       	ldi	r22, 0x06	; 6
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_IN3_PORT_ID , L293D_IN3_PIN_ID , LOGIC_LOW);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	63 e0       	ldi	r22, 0x03	; 3
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_IN4_PORT_ID , L293D_IN4_PIN_ID , LOGIC_LOW);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	64 e0       	ldi	r22, 0x04	; 4
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_EN1_PORT_ID , L293D_EN1_PIN_ID , LOGIC_LOW);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		GPIO_writePin(L293D_EN2_PORT_ID , L293D_EN2_PIN_ID , LOGIC_LOW);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	64 e0       	ldi	r22, 0x04	; 4
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
		break;
	}

}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <L293D_Rotate>:
/*
 * Description :
 -> Setup the rotation direction of the motor.
 -> The function take the channel and state (OFF , CW , A-CW) and the speed (0-100)
 */
void L293D_Rotate(uint8 Channel , DcMotor_State state){
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	28 97       	sbiw	r28, 0x08	; 8
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	6a 83       	std	Y+2, r22	; 0x02

	/* Make a PWM of duty cycle based on the speed */
	GPIO_writePin(L293D_EN1_PORT_ID,L293D_EN1_PIN_ID,LOGIC_HIGH);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>

	/* Controling the direction based on the speed argument and the channel required */
	switch(Channel){
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	38 87       	std	Y+8, r19	; 0x08
    1fe6:	2f 83       	std	Y+7, r18	; 0x07
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	98 85       	ldd	r25, Y+8	; 0x08
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	91 05       	cpc	r25, r1
    1ff0:	31 f0       	breq	.+12     	; 0x1ffe <L293D_Rotate+0x42>
    1ff2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff4:	38 85       	ldd	r19, Y+8	; 0x08
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	b1 f1       	breq	.+108    	; 0x2068 <L293D_Rotate+0xac>
    1ffc:	68 c0       	rjmp	.+208    	; 0x20ce <L293D_Rotate+0x112>
	case CHANNEL1_MODE:
		switch(state){
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3e 83       	std	Y+6, r19	; 0x06
    2006:	2d 83       	std	Y+5, r18	; 0x05
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	91 05       	cpc	r25, r1
    2010:	a9 f0       	breq	.+42     	; 0x203c <L293D_Rotate+0x80>
    2012:	2d 81       	ldd	r18, Y+5	; 0x05
    2014:	3e 81       	ldd	r19, Y+6	; 0x06
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	d9 f0       	breq	.+54     	; 0x2052 <L293D_Rotate+0x96>
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	09 f0       	breq	.+2      	; 0x2026 <L293D_Rotate+0x6a>
    2024:	54 c0       	rjmp	.+168    	; 0x20ce <L293D_Rotate+0x112>
		case OFF:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	66 e0       	ldi	r22, 0x06	; 6
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    203a:	49 c0       	rjmp	.+146    	; 0x20ce <L293D_Rotate+0x112>
			break;
		case CW:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_HIGH);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_LOW);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	66 e0       	ldi	r22, 0x06	; 6
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    2050:	3e c0       	rjmp	.+124    	; 0x20ce <L293D_Rotate+0x112>
			break;
		case A_CW:
			GPIO_writePin(L293D_IN1_PORT_ID,L293D_IN1_PIN_ID,LOGIC_LOW);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
			GPIO_writePin(L293D_IN2_PORT_ID,L293D_IN2_PIN_ID,LOGIC_HIGH);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	66 e0       	ldi	r22, 0x06	; 6
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    2066:	33 c0       	rjmp	.+102    	; 0x20ce <L293D_Rotate+0x112>
			break;
		}
		break;
		case CHANNEL2_MODE:
			switch(state){
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	3c 83       	std	Y+4, r19	; 0x04
    2070:	2b 83       	std	Y+3, r18	; 0x03
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	91 05       	cpc	r25, r1
    207a:	a1 f0       	breq	.+40     	; 0x20a4 <L293D_Rotate+0xe8>
    207c:	2b 81       	ldd	r18, Y+3	; 0x03
    207e:	3c 81       	ldd	r19, Y+4	; 0x04
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	d1 f0       	breq	.+52     	; 0x20ba <L293D_Rotate+0xfe>
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	01 f5       	brne	.+64     	; 0x20ce <L293D_Rotate+0x112>
			case OFF:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    20a2:	15 c0       	rjmp	.+42     	; 0x20ce <L293D_Rotate+0x112>
				break;
			case CW:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_HIGH);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	63 e0       	ldi	r22, 0x03	; 3
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_LOW);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	64 e0       	ldi	r22, 0x04	; 4
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <L293D_Rotate+0x112>
				break;
			case A_CW:
				GPIO_writePin(L293D_IN3_PORT_ID,L293D_IN3_PIN_ID,LOGIC_LOW);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	63 e0       	ldi	r22, 0x03	; 3
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
				GPIO_writePin(L293D_IN4_PORT_ID,L293D_IN4_PIN_ID,LOGIC_HIGH);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	64 e0       	ldi	r22, 0x04	; 4
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>
				break;
			}
			break;
	}
}
    20ce:	28 96       	adiw	r28, 0x08	; 8
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <BUZZER_init>:

/*
 * Description :
 -> Setup the direction for the buzzer pin as output pin.
 */
void BUZZER_init(){
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 3a 08 	call	0x1074	; 0x1074 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>

}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <BUZZER_on>:

/*
 * Description :
 -> Function to enable the Buzzer.
 */
void BUZZER_on(){
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>

}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <BUZZER_off>:

/*
 * Description :
 -> Function to disable the Buzzer.
 */
void BUZZER_off(){
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 25 09 	call	0x124a	; 0x124a <GPIO_writePin>

}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <main>:
 */
uint8 rx_data[2] = {0,0};



int main(void){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	60 97       	sbiw	r28, 0x10	; 16
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61

	/*this variable for store in it the value of ADC to rotate the Servo-Motor*/
	uint16 degree = 0;
    2146:	18 8a       	std	Y+16, r1	; 0x10
    2148:	1f 86       	std	Y+15, r1	; 0x0f

	/* setup the direction of red & green led ,active low led connection */
	G_LED_init();
    214a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <G_LED_init>
	R_LED_init();
    214e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <R_LED_init>

	SERVO_init();				/*Initialize Servo-Motor and set up it is pin */
    2152:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <SERVO_init>
	BUZZER_init();				/*Initialize the pin of the buzzer*/
    2156:	0e 94 70 10 	call	0x20e0	; 0x20e0 <BUZZER_init>
	L293D_Init(CHANNEL1_MODE);	/*Initialize Dc-Motor and set up it is pin */
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <L293D_Init>

	/* Flashing the leds and buzzer for 0.5 second*/
	G_LED_on();
    2160:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <G_LED_on>
	R_LED_on();
    2164:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <R_LED_on>
	BUZZER_on();
    2168:	0e 94 81 10 	call	0x2102	; 0x2102 <BUZZER_on>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	aa ef       	ldi	r26, 0xFA	; 250
    2172:	b3 e4       	ldi	r27, 0x43	; 67
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <main+0x8c>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <main+0x10a>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <main+0xec>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <main+0xda>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <main+0xce>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <main+0x116>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	G_LED_off();
    2250:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <G_LED_off>
	R_LED_off();
    2254:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <R_LED_off>
	BUZZER_off();
    2258:	0e 94 8d 10 	call	0x211a	; 0x211a <BUZZER_off>

	/*Initialize NRF and give each device master at first*/
	NRF24_init();
    225c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <NRF24_init>
	/*Initialize the NRF in the car as a receiver that receive from control unit*/
	NRF24_rxMode(rx_address , 10);
    2260:	88 e6       	ldi	r24, 0x68	; 104
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	6a e0       	ldi	r22, 0x0A	; 10
    2266:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <NRF24_rxMode>

	while(1){

		NRF24_init();
    226a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <NRF24_init>
		NRF24_rxMode(rx_address , 10);
    226e:	88 e6       	ldi	r24, 0x68	; 104
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	6a e0       	ldi	r22, 0x0A	; 10
    2274:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <NRF24_rxMode>

		rx_data[0] = 50;
    2278:	82 e3       	ldi	r24, 0x32	; 50
    227a:	80 93 70 00 	sts	0x0070, r24
		rx_data[1] = 0;
    227e:	10 92 71 00 	sts	0x0071, r1
		*
		* 4- check on the buzzer by check on the flag sent by the transmitter is this
		* 	  flag set to 1 the buzzer will turn on else it will turn off.
		*
		*/
		if(NRF24_isDataAvailable(1)){
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <NRF24_isDataAvailable>
    2288:	88 23       	and	r24, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <main+0x15c>
    228c:	6a c0       	rjmp	.+212    	; 0x2362 <main+0x230>

			NRF24_receive(rx_data);		/*receive the  data*/
    228e:	80 e7       	ldi	r24, 0x70	; 112
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <NRF24_receive>
			R_LED_on();					/* Turning on the led indicating that the data is received*/
    2296:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <R_LED_on>

			/*
			 * this equation to store the real value of ADC then pass it to servo-motor
			 */
			degree = (uint16)(rx_data[0])*10 + 800;
    229a:	80 91 70 00 	lds	r24, 0x0070
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	c9 01       	movw	r24, r18
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	80 5e       	subi	r24, 0xE0	; 224
    22b8:	9c 4f       	sbci	r25, 0xFC	; 252
    22ba:	98 8b       	std	Y+16, r25	; 0x10
    22bc:	8f 87       	std	Y+15, r24	; 0x0f

			SERVO_setDegree(degree);	/*rotate the servo-motor*/
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	0e 94 84 0b 	call	0x1708	; 0x1708 <SERVO_setDegree>

			/*check on the 3 flags (bit 0,1,2) of the motor to rotate */

			if((BIT_IS_SET(rx_data[1],PUSH_BUTTON_2)) && (BIT_IS_SET(rx_data[1],TOGGLE_SWITCH_UP))){
    22c6:	80 91 71 00 	lds	r24, 0x0071
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	82 70       	andi	r24, 0x02	; 2
    22d0:	90 70       	andi	r25, 0x00	; 0
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	79 f0       	breq	.+30     	; 0x22f4 <main+0x1c2>
    22d6:	80 91 71 00 	lds	r24, 0x0071
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	88 70       	andi	r24, 0x08	; 8
    22e0:	90 70       	andi	r25, 0x00	; 0
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	39 f0       	breq	.+14     	; 0x22f4 <main+0x1c2>
				G_LED_on();
    22e6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <G_LED_on>
				L293D_Rotate(1 , CW);
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <L293D_Rotate>
    22f2:	1b c0       	rjmp	.+54     	; 0x232a <main+0x1f8>
			}
			else if((BIT_IS_SET(rx_data[1],PUSH_BUTTON_2)) && (BIT_IS_SET(rx_data[1],TOGGLE_SWITCH_DOWN))){
    22f4:	80 91 71 00 	lds	r24, 0x0071
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	82 70       	andi	r24, 0x02	; 2
    22fe:	90 70       	andi	r25, 0x00	; 0
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	79 f0       	breq	.+30     	; 0x2322 <main+0x1f0>
    2304:	80 91 71 00 	lds	r24, 0x0071
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	80 71       	andi	r24, 0x10	; 16
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	39 f0       	breq	.+14     	; 0x2322 <main+0x1f0>
				G_LED_on();
    2314:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <G_LED_on>
				L293D_Rotate(1 , A_CW);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <L293D_Rotate>
    2320:	04 c0       	rjmp	.+8      	; 0x232a <main+0x1f8>
			}
			else{
				L293D_Rotate(1 , OFF);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <L293D_Rotate>
			}

			/*check on turn on buzzer or not*/
			if(BIT_IS_SET(rx_data[1],PUSH_BUTTON_3)){
    232a:	80 91 71 00 	lds	r24, 0x0071
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	84 70       	andi	r24, 0x04	; 4
    2334:	90 70       	andi	r25, 0x00	; 0
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	29 f0       	breq	.+10     	; 0x2344 <main+0x212>
				G_LED_on();
    233a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <G_LED_on>
				BUZZER_on();
    233e:	0e 94 81 10 	call	0x2102	; 0x2102 <BUZZER_on>
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <main+0x216>
			}
			else
				BUZZER_off();
    2344:	0e 94 8d 10 	call	0x211a	; 0x211a <BUZZER_off>

			if(BIT_IS_SET(rx_data[1],PUSH_BUTTON_1)){
    2348:	80 91 71 00 	lds	r24, 0x0071
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	81 70       	andi	r24, 0x01	; 1
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	88 23       	and	r24, r24
    2356:	11 f0       	breq	.+4      	; 0x235c <main+0x22a>
				G_LED_on();
    2358:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <G_LED_on>
			}
			else{

			}
			G_LED_off();
    235c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <G_LED_off>
    2360:	84 cf       	rjmp	.-248    	; 0x226a <main+0x138>
		}
		else{
			R_LED_off();
    2362:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <R_LED_off>
    2366:	81 cf       	rjmp	.-254    	; 0x226a <main+0x138>

00002368 <__udivmodsi4>:
    2368:	a1 e2       	ldi	r26, 0x21	; 33
    236a:	1a 2e       	mov	r1, r26
    236c:	aa 1b       	sub	r26, r26
    236e:	bb 1b       	sub	r27, r27
    2370:	fd 01       	movw	r30, r26
    2372:	0d c0       	rjmp	.+26     	; 0x238e <__udivmodsi4_ep>

00002374 <__udivmodsi4_loop>:
    2374:	aa 1f       	adc	r26, r26
    2376:	bb 1f       	adc	r27, r27
    2378:	ee 1f       	adc	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	a2 17       	cp	r26, r18
    237e:	b3 07       	cpc	r27, r19
    2380:	e4 07       	cpc	r30, r20
    2382:	f5 07       	cpc	r31, r21
    2384:	20 f0       	brcs	.+8      	; 0x238e <__udivmodsi4_ep>
    2386:	a2 1b       	sub	r26, r18
    2388:	b3 0b       	sbc	r27, r19
    238a:	e4 0b       	sbc	r30, r20
    238c:	f5 0b       	sbc	r31, r21

0000238e <__udivmodsi4_ep>:
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	1a 94       	dec	r1
    2398:	69 f7       	brne	.-38     	; 0x2374 <__udivmodsi4_loop>
    239a:	60 95       	com	r22
    239c:	70 95       	com	r23
    239e:	80 95       	com	r24
    23a0:	90 95       	com	r25
    23a2:	9b 01       	movw	r18, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	bd 01       	movw	r22, r26
    23a8:	cf 01       	movw	r24, r30
    23aa:	08 95       	ret

000023ac <__prologue_saves__>:
    23ac:	2f 92       	push	r2
    23ae:	3f 92       	push	r3
    23b0:	4f 92       	push	r4
    23b2:	5f 92       	push	r5
    23b4:	6f 92       	push	r6
    23b6:	7f 92       	push	r7
    23b8:	8f 92       	push	r8
    23ba:	9f 92       	push	r9
    23bc:	af 92       	push	r10
    23be:	bf 92       	push	r11
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	ca 1b       	sub	r28, r26
    23d6:	db 0b       	sbc	r29, r27
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	09 94       	ijmp

000023e4 <__epilogue_restores__>:
    23e4:	2a 88       	ldd	r2, Y+18	; 0x12
    23e6:	39 88       	ldd	r3, Y+17	; 0x11
    23e8:	48 88       	ldd	r4, Y+16	; 0x10
    23ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f6:	b9 84       	ldd	r11, Y+9	; 0x09
    23f8:	c8 84       	ldd	r12, Y+8	; 0x08
    23fa:	df 80       	ldd	r13, Y+7	; 0x07
    23fc:	ee 80       	ldd	r14, Y+6	; 0x06
    23fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2400:	0c 81       	ldd	r16, Y+4	; 0x04
    2402:	1b 81       	ldd	r17, Y+3	; 0x03
    2404:	aa 81       	ldd	r26, Y+2	; 0x02
    2406:	b9 81       	ldd	r27, Y+1	; 0x01
    2408:	ce 0f       	add	r28, r30
    240a:	d1 1d       	adc	r29, r1
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	ed 01       	movw	r28, r26
    2418:	08 95       	ret

0000241a <_exit>:
    241a:	f8 94       	cli

0000241c <__stop_program>:
    241c:	ff cf       	rjmp	.-2      	; 0x241c <__stop_program>
